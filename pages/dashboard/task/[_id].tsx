import type { NextPage } from "next";
import Head from "next/head";
import { useRouter } from "next/router";
import { useContext, useEffect, useState } from "react";
import TopBar from "../../../components/Navigation/TopBar";
import PageTitle from "../../../components/PageTitle";
import DefaultSEO from "../../../components/SEO";
import { UserContext } from "../../../contexts/userContext/UserContext";
import { getItem } from "../../../helpers/localStorage";
import {
  DropDownInput,
  InputDefault,
  RangeInput,
  TextAreaInput,
} from "../../../components/Inputs";
import {
  deleteTask,
  editTask,
  getTask,
} from "../../../helpers/serverRequests/tasks";
const TaskEdit: NextPage = () => {
  const router = useRouter();
  const idTask = router.query._id as string;

  const { userData } = useContext(UserContext);

  const [task, setTask] = useState({
    _id: "",
    title: "",
    description: "",
    status: "",
    priority: "",
    category: "",
    progress: "",
    author: "",
    assignedUsers: [],
    createdAt: "",
    updatedAt: "",
  });
  const [taskEdit, setTaskEdit] = useState({
    _id: "",
    title: "",
    description: "",
    status: "",
    priority: "",
    category: "",
    progress: "",
    author: "",
    assignedUsers: [],
    createdAt: "",
    updatedAt: "",
  });

  const [sucessDeleteTask, setSuccessDeleteTask] = useState(false);
  const [sucessEditTask, setSucessEditTask] = useState(false);

  const [projectNameError, setProjectNameError] = useState("");
  const [projectDescriptionError, setprojectDescriptionError] = useState("");
  const [intentToEditTask, setIntentToEditTask] = useState(false);

  const initialGetTask = async (_id: string) => {
    try {
      const token = await JSON.parse(await getItem("token"));
      const response = await getTask(token, _id);
      if (response.status === 200) {
        setTask(response.data.task);
        setTaskEdit(response.data.task);
      } else {
        router.push("/");
      }
    } catch (error) {
      console.error(error);
    }
  };

  const deleteTaskFunction = async (taskId: string) => {
    try {
      let token = await JSON.parse(await getItem("token"));
      const response = await deleteTask(token, taskId);
      if (response.status === 200) {
        setSuccessDeleteTask(true);
        setTimeout(() => {
          setSuccessDeleteTask(false);
        }, 3000);
      }
      if (response.status === 500) {
        setSuccessDeleteTask(false);
      }
    } catch (error) {
      console.log(error);
    }
  };

  const updateTaskFunction = async (taskId: string) => {
    try {
      let token = await JSON.parse(await getItem("token"));
      const response = await editTask(token, taskId, {
        title: taskEdit.title,
        description: taskEdit.description,
        status: taskEdit.status,
        priority: taskEdit.priority,
        category: taskEdit.category,
        progress: parseInt(taskEdit.progress),
      });
      if (response.status === 200) {
        setSucessEditTask(true);
      }
      if (response.status === 500) {
        setSucessEditTask(false);
      }
    } catch (error) {
      console.log(error);
    }
  };

  useEffect(() => {
    initialGetTask(idTask);
    if (!intentToEditTask) return;
    if (taskEdit.title.length <= 4) {
      setProjectNameError("Project name must be at least 5 characters");
    } else {
      setProjectNameError("");
    }
    if (taskEdit.description.length <= 4) {
      setprojectDescriptionError(
        "Project description must be at least 5 characters"
      );
    } else {
      setprojectDescriptionError("");
    }
  }, [sucessDeleteTask, sucessEditTask, idTask, intentToEditTask]);

  return (
    <div className="bg-[#E8EDF2] h-full min-h-screen dark:bg-[#0F0F12]">
      <Head>
        <title>
          Edit - [
          {task.title.length >= 5
            ? task.title.substring(0, 5) + "..."
            : task.title}{" "}
          ]
        </title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <DefaultSEO />
      </Head>
      <TopBar isLarge showLogo />
      <div className="w-[100%] mt-[100px] block relative h-full min-h-[89vh] p-[3em] px-[10%]">
          <PageTitle
            title="Task details"
            addBreadcrumb
            linksBreadcrumb={[
              {
                Name: "Home",
                Url: "/",
                icon: "/svg/home-2.svg",
              },
            ]}
          />
        <div className="flex flex-row w-full h-full py-10 px-10 bg-white rounded-xl border-[1px] border-[#E8EDF2] dark:bg-[#1F2128] dark:border-[#313442] mt-[5%]">
          <div className="flex flex-col w-full h-full justify-center items-center gap-5">
            <div className="flex flex-col h-full gap-2 w-full px-5 xl:px-10">
              <div
                className={`p-5 w-full rounded-xl mt-5 text-white bg-green-600 dark:bg-green-700 text-center ${
                  sucessEditTask || sucessDeleteTask ? "block" : "hidden"
                } mb-5`}
              >
                <p>
                  {sucessDeleteTask ? "Task successfully deleted" : ""}
                  {sucessEditTask ? "Task successfully edited" : ""}
                </p>
              </div>
              <div className="flex flex-col gap-5 w-full h-full justify-start items-left">
                <div
                  className={`${
                    projectNameError.length === 0 ? "" : "mb-[4em]"
                  }`}
                >
                  <label
                    htmlFor="projectName"
                    className="block text-md text-[#07070C] dark:text-white font-medium"
                  >
                    Project Name
                  </label>
                  <InputDefault
                    name="Project Name"
                    type="text"
                    placeholder="Type name here"
                    onChange={(e) =>
                      setTaskEdit({
                        ...taskEdit,
                        title: e.target.value,
                      })
                    }
                    error={projectNameError}
                    classNameInput="dark:placeholder-[#64646F]"
                    value={taskEdit.title}
                  />
                </div>
                <div className="h-full">
                  <label
                    htmlFor="projectDescription"
                    className="block text-md text-[#07070C] dark:text-white font-medium"
                  >
                    Description
                  </label>
                  <TextAreaInput
                    name="Description"
                    placeholder="Type description here"
                    onChange={(e) =>
                      setTaskEdit({
                        ...taskEdit,
                        description: e.target.value,
                      })
                    }
                    error={projectDescriptionError}
                    classNameInput="dark:placeholder-[#64646F]"
                    rows={10}
                    cols={5}
                    value={taskEdit.description}
                  />
                </div>
                <div className="h-full">
                  <label
                    htmlFor="projectDescription"
                    className="block text-md text-[#07070C] dark:text-white font-medium"
                  >
                    Category
                  </label>
                  <DropDownInput
                    name="Category"
                    text={taskEdit.category}
                    onClick={(e) =>
                      setTaskEdit({
                        ...taskEdit,
                        category: e.currentTarget.innerHTML,
                      })
                    }
                    classNameInput="dark:placeholder-[#64646F] text-[14px] text-[#9A9AAF] dark:text-[#64646F]"
                    list={[
                      "Software Team",
                      "Design Team",
                      "Testing Team",
                      "Other",
                    ]}
                    iconPath="/svg/arrow-down.svg"
                  />
                </div>
                <div className="h-full">
                  <label
                    htmlFor="projectDescription"
                    className="block text-md text-[#07070C] dark:text-white font-medium"
                  >
                    Priority
                  </label>
                  <DropDownInput
                    name="Priority"
                    text={taskEdit.priority}
                    onClick={(e) =>
                      setTaskEdit({
                        ...taskEdit,
                        priority: e.currentTarget.innerHTML,
                      })
                    }
                    classNameInput="dark:placeholder-[#64646F] text-[14px] text-[#9A9AAF] dark:text-[#64646F]"
                    list={["High", "Medium", "Low"]}
                    iconPath="/svg/arrow-down.svg"
                  />
                </div>
                <div className="h-full">
                  <label
                    htmlFor="projectDescription"
                    className="block text-md text-[#07070C] dark:text-white font-medium"
                  >
                    Status
                  </label>
                  <DropDownInput
                    name="Priority"
                    text={taskEdit.status}
                    onClick={(e) =>
                      setTaskEdit({
                        ...taskEdit,
                        status: e.currentTarget.innerHTML,
                      })
                    }
                    classNameInput="dark:placeholder-[#64646F] text-[14px] text-[#9A9AAF] dark:text-[#64646F]"
                    list={["Completed", "In Progress", "Pending"]}
                    iconPath="/svg/arrow-down.svg"
                  />
                </div>
                <div className="h-full">
                  <label
                    htmlFor="projectDescription"
                    className="block text-md text-[#07070C] dark:text-white font-medium"
                  >
                    Progress
                  </label>
                  <div className="flex flex-row">
                    <RangeInput
                      name="Progress"
                      value={parseInt(taskEdit.progress)}
                      onChange={(e) =>
                        setTaskEdit({
                          ...taskEdit,
                          progress: e.target.value,
                        })
                      }
                      classNameInput="dark:placeholder-[#64646F] text-[14px] text-[#9A9AAF] dark:text-[#64646F]"
                      min={0}
                      max={100}
                      step={1}
                    />
                    <p className="text-md text-[#07070C] dark:text-white font-medium">{taskEdit.progress}</p>
                  </div>
                </div>
              </div>
              <div className="mt-10 flex flex-row flex-wrap gap-3 items-center w-full h-full justify-start">
                <button
                  type="button"
                  className="bg-[#7364DB] text-white font-semibold py-2 px-4 rounded-lg text-sm dark:text-white text-[14px]"
                  onClick={() => {
                    updateTaskFunction(task._id);
                  }}
                >
                  Update
                </button>
                <button
                  type="button"
                  className="bg-[#E23738] text-white font-semibold py-2 px-4 rounded-lg text-sm dark:text-white text-[14px]"
                  onClick={() => {
                    deleteTaskFunction(task._id);
                  }}
                >
                  Delete
                </button>
                <button
                  type="button"
                  className="bg-[#E8EDF2] text-[#B8B1E4] font-semibold py-2 px-4 rounded-lg text-sm dark:bg-[#313442] text-[14px]"
                  onClick={() => {
                    setSuccessDeleteTask(false);
                    setSucessEditTask(false);
                    router.push("/");
                  }}
                >
                  Cancel
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default TaskEdit;
